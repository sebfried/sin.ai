const fs = require('fs-extra');
const path = require('path');
const { minify } = require('html-minifier-terser');

// Define the htmlConfig object to configure the script
const htmlConfig = {
  baseDirectory: 'docs', // The base directory for processing HTML files
  excludedDirectories: [], // Directories and subdirectories to exclude from processing
};

// Define the htmlMinifierConfig object to configure html-minifier-terser options
const htmlMinifierConfig = {
  // Sample html-minifier-terser options, you can customize these as needed
  caseSensitive: false,
  collapseBooleanAttributes: false,
  collapseInlineTagWhitespace: true,
  collapseWhitespace: true,
  conservativeCollapse: false,
  continueOnParseError: false,
  customAttrAssign: [],
  customAttrCollapse: undefined,
  customAttrSurround: [],
  customEventAttributes: [/^on[a-z]{3,}$/],
  decodeEntities: false,
  html5: true,
  ignoreCustomComments: [/^!/, /^\s*#/],
  ignoreCustomFragments: [/\<%[\s\S]*?%\>/, /\<\?[\s\S]*?\?>/],
  includeAutoGeneratedTags: true,
  keepClosingSlash: false,
  maxLineLength: undefined,
  minifyCSS: true,
  minifyJS: false,
  minifyURLs: false,
  noNewlinesBeforeTagClose: false,
  preserveLineBreaks: false,
  preventAttributesEscaping: false,
  processConditionalComments: false,
  processScripts: [],
  quoteCharacter: undefined,
  removeAttributeQuotes: false,
  removeComments: true,
  removeEmptyAttributes: false,
  removeEmptyElements: false,
  removeOptionalTags: false,
  removeRedundantAttributes: false,
  removeScriptTypeAttributes: false,
  removeStyleLinkTypeAttributes: false,
  removeTagWhitespace: false,
  sortAttributes: false,
  sortClassName: false,
  trimCustomFragments: false,
  useShortDoctype: false,
};

// Function to minify HTML files using html-minifier-terser
async function minifyHTMLFiles(htmlConfig, htmlMinifierConfig) {
  try {
    const { baseDirectory, excludedDirectories } = htmlConfig;

    // Function to recursively get all HTML files in a directory
    const getHTMLFilesRecursive = async (dir) => {
      const dirents = await fs.readdir(dir, { withFileTypes: true });
      const files = await Promise.all(dirents.map(async (dirent) => {
        const res = path.resolve(dir, dirent.name);
        if (dirent.isDirectory()) {
          return excludedDirectories.includes(res) ? [] : getHTMLFilesRecursive(res);
        } else if (dirent.isFile() && path.extname(dirent.name) === '.html') {
          return [res];
        } else {
          return [];
        }
      }));
      return Array.prototype.concat(...files);
    };

    // Get HTML files to minify
    const htmlFilesToMinify = await getHTMLFilesRecursive(baseDirectory);
    console.log('Total HTML files to minify:', htmlFilesToMinify.length);
    console.log('htmlFilesToMinify:', htmlFilesToMinify);

    // Minify HTML files using html-minifier-terser
    for (const file of htmlFilesToMinify) {
      console.log('Minifying:', file);
      const code = await fs.readFile(file, 'utf-8');
      try {
        const result = await minify(code, htmlMinifierConfig);
        await fs.writeFile(file, result, 'utf-8');
        console.log('Minified:', file);
      } catch (err) {
        console.error('Error during minification:', err);
      }
    }

    console.log('HTML files minified successfully!');
  } catch (err) {
    console.error('An error occurred:', err);
  }
}

// Call the minifyHTMLFiles function with the provided configurations
minifyHTMLFiles(htmlConfig, htmlMinifierConfig);
